* Calibre OPDS client
** What's this?
This is a calibre plugin that is an OPDS client intended to read the contents of another calibre installation, find the differences to the current calibre and offer to copy books from the other calibre into the current calibre
** How do I install it?
Requires git and calibre installed:
 - Clone the repository:
   #+BEGIN_EXAMPLE
     git clone https://github.com/steinarb/opds-reader.git
   #+END_EXAMPLE
 - Install the plugin in calibre
   #+BEGIN_EXAMPLE
     cd opds-reader/calibre_plugin/
     calibre-customize -b .
   #+END_EXAMPLE
 - Start calibre (if calibre was already running, stop calibre and start it again)
 - Click the button "Preferences"
 - In the dialog "calibre - Preferences":
   - Under "Interface", click on the button "Toolbar"
   - In the dialog "calibre - Preferences - Toolbar":
     - In the dropdown, select "The main toolbare"
     - In "Available actions" scroll down to find "OPDS Client" and select it
     - Click the top arrow button (arrow pointing right)
     - Click the "Apply" button
   - Click the "Close" button
* List of TODO items [12/29]
** DONE Create an icon
- The plugin API seems to mandate one for a plugin that is to add an action to the GUI
- Need an icon that doesn't have any copyright limitations, it doesn't have to be pretty
** DONE Put a list of books into the dialog
 - <2015-08-23 søn 08:50> Will use a [[http://doc.qt.io/qt-5/qtableview.html][QTableView]]
   - import:
     #+BEGIN_SRC python
       from PyQt5.Qt import QTableView
     #+END_SRC
   - Tried using the derived class BookView, but this failed because the parent (OpdsDialog) was missing the field iactions
   - Will try filling the QtTableView with BooksModel which derives from [[http://doc.qt.io/qt-5/qabstracttablemodel.html][QAbstractTableModel]]
     #+BEGIN_SRC python
       from calibre.gui2.library.models import BooksModel
     #+END_SRC
   - The argument to BooksModel.setData will be a list of SearchResult instances
     #+BEGIN_SRC python
       from calibre.gui2.store.search_result import SearchResult
     #+END_SRC
   - SearchResult contains the following fields:
     - store_name
     - cover_url
     - cover_data
     - title
     - author
     - price
     - detail_item
     - drm
     - formats
     - downloads
       - dictionary
     - affilate
       - boolean
     - plugin_author
     - create_browser
   - SearchResult equality is determined in the following way:
     #+BEGIN_SRC python
       return self.title == other.title and self.author == other.author and self.store_name == other.store_name and self.formats == other.formats
     #+END_SRC
     - The "formats" part of the comparison may be an issue when comparing with the current database? Could be that a comparison that excludes formats may be needed? E.g. I may want to keep ORIGINAL_EPUB in the calibre where I did the conversion, but not bother copying it to other calibres
   - An example usage of creating a list of SearchResult is in calibre in MobileReadStore.deserialize_books
** DONE Read RSS from the plugin and put the resulting data into a datastructure compatible with the calibre db API
 - <2015-08-23 søn 10:17> Will try putting the resulting data into SearchResult initially (as mentioned in the previous TODO item)
 - <2015-08-23 søn 11:05> The feedparser is already present in calibre
   - import statement:
     #+BEGIN_SRC python
       from calibre.web.feeds.feedparser import parse
     #+END_SRC
 - <2015-08-23 søn 12:02> The BooksModel used in view.py is directly connected to the database, i.e. can't use that BooksModel
   - Instead created a new BooksModel patterned on the one in the mobileread store
   - Use a new data structure OpdsBook instead of SearchResult
** DONE Populate the list in the GUI with data read from the RSS
 - <2015-08-23 søn 10:18> Hopefully this will be as simple as calling BooksModel.setData
** DONE Make the list of books look a little better (resize the dialog to make room for everything)
** DONE Add a checkbox to filter out newspapers
** DONE Add a checkbox to filter out books already present in the library
** DONE Make the book datamodel be Metadata (add a field to hold the parsed OPDS structure), and parse all available metadata info
** DONE Add a download button to download the selected books
 - <2015-09-04 fre 21:44> Makes a list of all book download links with EPUB first if found and download the first URL in the list
** DONE Fix line height after updates
** DONE Move OPDS reading to the model and use the model refresh instead of setting a new model
** DONE Restore the authors to the OPDS book list
** DONE Make sure all of the books in the library are listed
 - <2015-09-05 lør 10:34> Calibre is set up by default to only deliver 30 items
 - <2015-09-05 lør 23:20> Following the "next" links of the feed until there are no more "next"
** TODO Give feedback on the number of OPDS books downloaded
** TODO Get a display value back for "updated"
** TODO Set the date/time of the copied book to the date of the original
** TODO Copy read marks in calibre's reader from the remote
** TODO Refresh the list as books are downloaded (suppress downloaded books from the list)
** TODO Format the book list with different color for alternate lines
** TODO Add licensing information (GPLv3) to the to level project
** TODO Add licensing and copyright information to all files
** TODO Explore the documentation format to see if it is relevant to this plugin
** TODO Add recently used dropdown to the opds_url configuration
** TODO Make the OPDS parsing more robust (hardcoded to the default structure of calibre right now)
** TODO Add configuration options for defaults for the "hide" checkboxes
** TODO Migrate own code from underscore separation to camelCase (Python has a camelCase modula/pascal feel to it)
** TODO Remove all leftover debug trace
** TODO Add cover thumbnails to the list of books
** TODO Add an exclusion list (a list of books that should be permanently hidden from the comparison)
